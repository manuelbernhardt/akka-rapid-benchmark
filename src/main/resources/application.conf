akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = cluster
  }

  remote {

    watch-failure-detector {
      threshold = 12.0
      acceptable-heartbeat-pause = 15 s
      heartbeat-interval = 3 s
      expected-response-after = 3 s
    }

    artery {
      transport = tcp

      canonical.hostname = "127.0.0.1"
      canonical.hostname = ${?HOSTNAME}
      canonical.port     = 2552

      tcp {
        connection-timeout = 5 seconds
      }

      advanced {
        system-message-resend-interval = 1 s

        handshake-retry-interval = 1 second
        inject-handshake-interval = 1 second

        inbound-max-restarts = 30
        outbound-restart-backoff = 1 second
        outbound-restart-timeout = 5 seconds
        outbound-max-restarts = 50

        # Way too big, of course, but we don't know how large the response can get at 10000 nodes
        maximum-frame-size = 25600 KiB

      }

    }
  }

  cluster {

    failure-detector {
      # 1 second by default, but we want to run 10000 nodes with t3.small instances and they only have 1 vCPU
      heartbeat-interval = 5 s
      threshold = 12.0
      acceptable-heartbeat-pause = 15 s
      expected-response-after = 5 s
    }

    rapid {

      use-consistent-hash-broadcasting = true
      act-as-consistent-hash-broadcaster = false

      batching-window = 250 millis

      # fall back to paxos consensus
      # make this too low and a gazillion smaller nodes will attempt full paxos
      # make it too high and no consensus will be reached
      consensus-fallback-timeout-base-delay = 5 seconds

      messaging {
        # This is way beyond what it should be (it should be 1 second)
        # But we're running this at scale on small machines, so let's just be patient
        default-timeout = 5 seconds
        default-retries = 5
      }
    }
  }

  http {
    server {
      enable-http2 = false
      max-connections = 100000
      idle-timeout = 15 s
    }
    client {
      idle-timeout = 15 s
    }
  }

  coordinated-shutdown.exit-jvm = on

}

